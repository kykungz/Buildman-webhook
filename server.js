const express = require('express')
const line = require('@line/bot-sdk')
const axios = require('axios')
const firebase = require('./firebase')
const keywords = require('./keywords')
const { getImage } = require('./util')
const visionAPI = 'https://vision.googleapis.com/v1/images:annotate?key=AIzaSyCOLw7yAvDHhXa1_FdoFD6QzXEooESleo8'
const translateAPI = 'https://translation.googleapis.com/language/translate/v2?key=AIzaSyCOLw7yAvDHhXa1_FdoFD6QzXEooESleo8'

const config = {
  channelAccessToken: 'CTko6aT0ooka5oylc6uU9d2MvFdWDG7aThf4YwRlJnVuTA2z3BENzjUGrCFBr4DASn0K/3I3XIO8lhXcIeRu3+T7R99G9c1O+bTEFGmF+UOhlIT63P4lPcEPbKVRNkC959HM9j2LjTvpzXIBIVj9AwdB04t89/1O/w1cDnyilFU=',
  channelSecret: 'aa2b4e251b7872c3c2ca581deb706a1e'
}

const client = new line.Client(config)

const app = express()

app.get('/', (req, res) => {
    res.send({
      msg: 'hello from home page'
    })
})

app.post('/webhook', line.middleware(config), (req, res) => {
  Promise
    .all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
})

let stages = []
let users = {}

const match = (text, keywords) => {
  return keywords.some(keyword => text.includes(keyword))
}

let step = null
// let step = 'subscribe'

async function handleEvent(event) {
  console.log(event)
  if (event.type !== 'message') { //|| event.message.type !== 'text') {
    return Promise.resolve(null)
  }
  // subscribe
  if (event.message.type === 'location' || event.message.text === 'sub') {
    step = 'subscribe'
    return client.replyMessage(event.replyToken, [
      {
        "type": "template",
        "altText": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
        "template": {
          "type": "buttons",
          "title": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
          "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°",
          "defaultAction": {
            "type": "uri",
            "label": "View detail",
            "uri": "http://example.com/page/123"
          },
          "actions": [
            {
              "type": "message",
              "label": "‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á",
              "text": "‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á"
            }, {
              "type": "message",
              "label": "‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏¢‡πà‡∏≤‡∏ö‡∏∏‡∏£‡∏µ",
              "text": "‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏¢‡πà‡∏≤‡∏ö‡∏∏‡∏£‡∏µ"
            }, {
              "type": "message",
              "label": "‡∏ó‡∏±‡∏ä‡∏°‡∏≤‡∏Æ‡∏≤‡∏•‡∏•‡∏•",
              "text": "‡∏ó‡∏±‡∏ä‡∏°‡∏≤‡∏Æ‡∏≤‡∏•‡∏•‡∏•"
            }
          ]
        }
      }
    ])
  }

  if (step === 'subscribe') {
    step = null
    setTimeout(() => {
      client.multicast([event.source.userId], [
        {
          type: 'text',
          text: `üöß‚Äç‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤üöß\n\n‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡∏Å‡∏•‡∏∞‡πÇ‡∏ß‡πâ‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢\n‡∏´‡∏ô‡∏µ‡πÜ‡πÜ‡πÜ‡πÜ‡πÜ‡πÜ`,
        }
      ])
    }, 8000)
    return client.replyMessage(event.replyToken, [{
      type: 'text',
      text: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÇ‡∏£‡πâ‡∏¢‡∏¢‡∏¢‡∏¢'
    }])
  }

  if (event.message.type === 'image' || event.message.text === 'report') {
    step = 'report'
    return client.replyMessage(event.replyToken, [{
      type: 'text',
      text: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
    }])
  }

  if (step === 'report') {
    step = null
    return client.replyMessage(event.replyToken, [{
      type: 'text',
      text: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏î‡∏•‡∏∞ ‡∏°‡∏µ‡πÑ‡∏£‡∏≠‡∏µ‡∏Å‡∏õ‡∏∞ ‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç'
    }])
  }

  if (event.message.text === '*‡∏™‡∏†‡∏≤‡∏û‡∏°‡∏•‡∏†‡∏≤‡∏ß‡∏∞') {
    step = null
    return client.replyMessage(event.replyToken, [{
      type: 'text',
      text: `
‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏°‡∏•‡∏†‡∏≤‡∏ß‡∏∞

O3: 3 ppb
CO: 0.53 ppm
NO3: 1 ppb
SO2: 1 ppb
‡∏•‡∏∞‡∏≠‡∏≠‡∏á‡∏ù‡∏∏‡πà‡∏ô (PM 2.5): 42
‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (AQI): 52

‡∏™‡∏£‡∏∏‡∏õ: ‡∏°‡∏µ‡∏ù‡∏∏‡πà‡∏ô‡∏•‡∏∞‡∏≠‡∏≠‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏Ñ‡∏±‡∏ö‡∏õ‡πã‡∏°
`.trim()
    }])
  }

  if (event.message.text === '*‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î') {
    step = null
    return client.replyMessage(event.replyToken, [{
      type: 'text',
      text: `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£\n`
    }])
  }

  if (event.message.text === '*‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤') {
    step = null
    return client.replyMessage(event.replyToken, [{
      type: 'text',
      text: `‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°:\n`
    }])
  }

  if (event.message.text === '*‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°') {
    return Promise.resolve(null)
  }

  if (event.message.text === '*‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏') {
    return Promise.resolve(null)
  }

  return Promise.resolve(null)

  return client.replyMessage(event.replyToken, [
    {
      type: 'text',
      text: '‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à'
    }
  ])

  return client.replyMessage(event.replyToken, [
    {
      type: 'text',
      text: event.message.text
    }
  ])
}

app.listen(process.env.PORT || 8000)
